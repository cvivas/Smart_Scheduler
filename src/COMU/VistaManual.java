/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Descripcion: Vista del manual del programa
 * Autor: Xavier Oró Gay
 * Ultima actualizacion: 29 de abril 2009
 */

package Agenda;

class VistaManual extends javax.swing.JDialog {

    /** Creates new form NewJDialog */
    public VistaManual(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Texto_manual = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24));
        jLabel1.setText("Manual");

        Texto_manual.setColumns(20);
        Texto_manual.setEditable(false);
        Texto_manual.setRows(5);
        Texto_manual.setText("Enunciats dels projectes de PROP\nQuadrimestre de primavera, curs 08/09\n\nEnunciat 1: Agenda personal intel·ligent\n\nEs demana fer una agenda/calendari on puguis anotar i gestionar tasques diàries. Hi ha\ncom a mínim els següents tipus de tasques (els noms són orientatius):\n• Cites: Tasques a fer un dia i hora determinat (ex: \"reunió amb X, dimecres 15 de\n9:30 a 10:15”). Poden haver-hi cites repetitives, com ara \"classe d'anglès cada\ndilluns de 19 a 21\", que cal poder gestionar còmodament.\n• Deadlines: Feines que cal haver fet per tal dia a tal hora, però s'entén que cal\nanar treballant-hi abans (ex.: \"3r lliurament de PROP divendres 15 a les 18:00\").\nA més de la data límit, a cada deadline se li pot associar una estimació de la\nquantitat d’hores de treball que requereix.\n• En ment: Tasques que no tenen un dia i hora concrets ni una data límit, però que\nalgun moment voldrem fer. Exemples podrien ser “endreçar àlbums de fotos”,\n“aprendre Python i Perl”, “reprendre el contacte amb els amics de l’institut” o\n“buscar empreses de Barcelona que estiguin contractant gent amb el meu perfil”.\nPoden també tenir una estimació d’hores.\nTots els tipus de tasques poden tenir informació associada (prioritats d’1 a 5, temes,\nparaules clau, noms de persones, petites descripcions textuals...) i ha de ser possible\nllistar totes les tasques relacionades amb un cert tema, persona, etc. El programa ha de\npermetre també gestionar precedències entre tasques, un petit historial de tasques fetes i\nestadístiques bàsiques (per exemple, hores ocupades en cites en un període donat,\npercentatge de temps passat en cada prioritat o tipus de tasca, volum d’hores estimades\npendents...)\nD’altra banda, tenir en compte que moltes tasques en ment són tan importants o més que\nles altres per als nostres projectes vitals i professionals, però els acostumem a anar\ndeixant perquè sempre hi ha tasques més urgents que passen davant. Igualment, és fàcil\ndeixar la feina dels deadlines per al final, i trobar-nos de cop que ja no ens queden prou\nhores per completar-los. Es vol que el programa ens ajudi que deadlines i tasques\nprogressin adequadament. Per això, podria oferir opcions per, per exemple, reservar\nblocs d’hores a deadlines i tasques en ment durant la setmana, sense col·lisionar amb\ncompromisos. O que ens avisi dels deadlines que s’estan quedant perillosament\nendarrerits, o si ens estem sobrecarregant de feina (total d’hores massa gran) per a un\nperíode, o suggerir les tasques amb prioritat alta que ja fa molt temps que anem\nendarrerint, etc.\n\nEnunciat 2: Agenda cultural\n\nEs tracta de fer un programa per gestionar l'agenda cultural d'una organització com ara\nun ajuntament gran. Cal poder introduir esdeveniments, gestionar els espais on es fan\naquests esdeveniments, mantenir informació sobre les persones de contacte\nd'esdeveniments i espais, etc.\nL'agenda ha d'ajudar a confeccionar còmodament programes culturals formats per mes\nd'un esdeveniment, com ara un cicle periòdic (\"cada dilluns de 22:00 a 24:00, un\nconcert del cicle X\") o un festival on hi ha molts esdeveniments relacionats en poc\ntemps (com ara el Grec). Cada esdeveniment pot tenir associada una sèrie d’accions\n(una “to-do-list”) com ara notificacions als mitjans de comunicació, llistes de persones a\nconvidar, reserves especials d’equipaments, etc. Els esdeveniments s’han de poder\netiquetar com a “fixes” (no es pot canviar ni la data ni el lloc) o “canviables” (el\nprograma pot suggerir un canvi de data/espai en cas de que fos necessari per col·locar\nun nou esdeveniment més preferent. Cal poder introduir restriccions en el calendari. Per\nexemple, esdeveniments que cal celebrar amb certa freqüència (i que el programa avisi\nquan comença a fer massa temps que no se celebren).\nAixò pel que fa als administradors del sistema. Pel que fa als usuaris d’a peu (els\n“ciutadans”), el programa ha de permetre llistar esdeveniments per temes (música/teatre\n/conferències…), per espais, per paraules clau contingudes en les ressenyes dels\nesdeveniments…\n\nEnunciat 3: Planificador d’esdeveniments\n\nEs tracta de fer un programa per fixar els horaris (dies i hores) d'un esdeveniment que\nsiguin més convenients per un grup d'assistents. El programa està inspirat en \"Doodle\"\n(http://www.doodle.com/main.html). Convé que li feu una ullada.\nEl sistema admet dos tipus d'usuaris, els administradors i els usuaris. Els administradors\nhan de definir les característiques de l'esdeveniment a programar (nombre total de dies i\nhores, nombre d'assistents, etc.) i les restriccions que s'han de satisfer (dies possibles,\nhores possibles, nombre màxim d'hores per dia, etc.)\nUn cop definit aquest marc els usuaris han de comunicar les seves restriccions i\npreferències. Això es podrà fer de dues formes: important per part de l'aplicació les\nagendes personals dels usuaris (definides a l’enunciat 1) i/o de forma interactiva a través\nd'una interfície gràfica. S'han de tenir en compte les capacitats habituals d'aquests tipus\nd'aplicació (afegir, modificar, inicialitzar, desfer les últimes operacions, etc.).\nUn cop tots els participants hagin definit les seves restriccions, el sistema ha de triar\nl'opció més convenient. S'han de tenir en compte totes les possibles situacions: Que hi\nhagi una o més possibles solucions que satisfacin totes les restriccions i preferències de\ntots els usuaris, que no totes les preferències es puguin satisfer o que no existeixi cap\nsolució vàlida per a tots els usuaris. El sistema haurà de prendre una decisió seguint\ncriteris que els administradors poden establir (per exemple, satisfer el màxim possible\nde preferències, satisfer el màxim possible d'usuaris, etc.)\nUn cop decidit l'horari final de l'esdeveniment el sistema podrà, opcionalment,\nmodificar i exportar les agendes actualitzades dels usuaris.");
        Texto_manual.setCaretPosition(0);
        Texto_manual.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                Texto_manualPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(Texto_manual);

        jButton1.setText("Cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Texto_manualPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_Texto_manualPropertyChange
        Texto_manual.setEditable(false);
        // TODO add your handling code here:
}//GEN-LAST:event_Texto_manualPropertyChange

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
}//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VistaManual dialog = new VistaManual(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Texto_manual;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
